<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>springboot3.x的各项改动</title>
    <link href="/2025/06/09/springboot3-x%E7%9A%84%E5%90%84%E9%A1%B9%E6%94%B9%E5%8A%A8/"/>
    <url>/2025/06/09/springboot3-x%E7%9A%84%E5%90%84%E9%A1%B9%E6%94%B9%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="升级springboot3-0问题"><a href="#升级springboot3-0问题" class="headerlink" title="升级springboot3.0问题"></a>升级springboot3.0问题</h1><p>时代的潮流，迫使不得不更新到boot3.x. 以下是做的一些改动</p><h2 id="1、javax包改动问题"><a href="#1、javax包改动问题" class="headerlink" title="1、javax包改动问题"></a>1、javax包改动问题</h2><p>在升级到 Spring Boot 3.x 后出现 <code>javax.persistence.AttributeConverter</code> 爆红的问题，是因为 Jakarta EE 9+ 已经将包名从 <code>javax</code> 迁移到了 <code>jakarta</code>。以下是解决方案：</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Spring Boot 3.x 基于 Spring Framework 6 和 Jakarta EE 9+，后者已将 <code>javax.persistence</code> 等包名统一改为 <code>jakarta.persistence</code>。</p><p>将：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.persistence.AttributeConverter;<br></code></pre></td></tr></table></figure><p>改成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> jakarta.persistence.AttributeConverter;<br></code></pre></td></tr></table></figure><p>更新maven依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;jakarta.persistence&lt;/groupId&gt;<br>    &lt;artifactId&gt;jakarta.persistence-api&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">3.1</span><span class="hljs-number">.0</span>&lt;/version&gt; &lt;!-- 使用最新稳定版 --&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">import</span> javax.validation.constraints.NotNull;   ---&gt;</span>  <span class="hljs-keyword">import</span> jakarta.validation.constraints.NotNull;<br><span class="hljs-function"><span class="hljs-title">javax</span>.annotation.PostConstruct                 ---&gt;</span>  jakarta.annotation.PostConstruct<br><span class="hljs-function"><span class="hljs-title">import</span> javax.servlet.http.HttpServletRequest;  ---&gt;</span>  <span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br></code></pre></td></tr></table></figure><h2 id="2、JwtIssuerAuthenticationManagerResolver"><a href="#2、JwtIssuerAuthenticationManagerResolver" class="headerlink" title="2、JwtIssuerAuthenticationManagerResolver"></a>2、JwtIssuerAuthenticationManagerResolver</h2><p>旧写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.oauth2.jwt.JwtIssuerAuthenticationManagerResolver;<br>JwtIssuerAuthenticationManagerResolver authenticationManagerResolver=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtIssuerAuthenticationManagerResolver</span>(issuersList);<br></code></pre></td></tr></table></figure><p>新写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver;<br><span class="hljs-type">JwtIssuerAuthenticationManagerResolver</span> <span class="hljs-variable">resolver</span> <span class="hljs-operator">=</span> JwtIssuerAuthenticationManagerResolver.fromTrustedIssuers(issuersList);<br></code></pre></td></tr></table></figure><h2 id="3、检查并升级-Spring-Cloud-Sleuth-版本"><a href="#3、检查并升级-Spring-Cloud-Sleuth-版本" class="headerlink" title="3、检查并升级 Spring Cloud Sleuth 版本"></a>3、检查并升级 Spring Cloud Sleuth 版本</h2><p>因为 Spring Boot 3.x 对分布式追踪系统进行了重大重构，从 Spring Cloud Sleuth 迁移到了 Micrometer Tracing</p><p>所以我们要引入pom的配置，还要在yml进行修改</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-string">``</span><span class="hljs-string">`</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">## 4、Spring Boot 3.x 中，`</span><span class="hljs-title class_">RestTemplate</span><span class="hljs-string">` 已不再是自动配置的 Bean，需要手动声明</span><br><span class="hljs-string"></span><br><span class="hljs-string">`</span><span class="hljs-string">``</span>java<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">RestTemplate</span> <span class="hljs-title function_">restTemplate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="5、tomcat版本要10以上"><a href="#5、tomcat版本要10以上" class="headerlink" title="5、tomcat版本要10以上"></a>5、tomcat版本要10以上</h2><p>目前我用的是10.1.42版本</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;tomcat.version&gt;</span><span class="hljs-attribute">10</span>.<span class="hljs-number">1</span>.<span class="hljs-number">42</span>&lt;/tomcat.version&gt;<br></code></pre></td></tr></table></figure><h2 id="6、application配置的层级问题"><a href="#6、application配置的层级问题" class="headerlink" title="6、application配置的层级问题"></a>6、application配置的层级问题</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">cloud:</span><br><span class="hljs-symbol">  stream:</span><br><span class="hljs-symbol">    function:</span><br><span class="hljs-symbol">      definition:</span> receiveAuditLogE<span class="hljs-attr">vent</span><span class="hljs-punctuation">;</span>rabbitReceiveAuditLogEvent<br></code></pre></td></tr></table></figure><p>修改成：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">cloud:</span><br><span class="hljs-symbol">  function:</span><br><span class="hljs-symbol">    definition:</span> receiveAuditLogE<span class="hljs-attr">vent</span><span class="hljs-punctuation">;</span>rabbitReceiveAuditLogEvent<br><span class="hljs-symbol">  stream:</span><br></code></pre></td></tr></table></figure><h2 id="7、Hibernate"><a href="#7、Hibernate" class="headerlink" title="7、Hibernate"></a>7、<strong>Hibernate</strong></h2><ol><li><strong>Hibernate 6 的破坏性变更</strong><ul><li>Hibernate 5.x 的 <code>@Type(type = &quot;yes_no&quot;)</code> 用于将 <code>Boolean</code> 类型映射到数据库的 <code>CHAR(1)</code>（<code>&#39;Y&#39;/&#39;N&#39;</code>）。</li><li><strong>Hibernate 6.x 移除了 <code>@Type</code> 的简单用法</strong>，改为更明确的类型系统（需要配合 <code>@JdbcType</code> 或 <code>@JavaType</code>）。</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.hibernate.annotations.JdbcType;<br><span class="hljs-keyword">import</span> org.hibernate.type.descriptor.jdbc.CharJdbcType;<br><br><span class="hljs-meta">@Column(name = &quot;is_active&quot;)</span><br><span class="hljs-meta">@JdbcType(CharJdbcType.class)</span>  <span class="hljs-comment">// 指定数据库存储为 CHAR</span><br><span class="hljs-keyword">private</span> Boolean isActive;       <span class="hljs-comment">// 自动映射为 &#x27;Y&#x27;/&#x27;N&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot升级到3.x版本.md</title>
    <link href="/2025/06/06/springboot%E5%8D%87%E7%BA%A7%E5%88%B03-x%E7%89%88%E6%9C%AC-md/"/>
    <url>/2025/06/06/springboot%E5%8D%87%E7%BA%A7%E5%88%B03-x%E7%89%88%E6%9C%AC-md/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot-2-7-4-升级到-3-x-涉及-Spring-Security-的注意事项"><a href="#Spring-Boot-2-7-4-升级到-3-x-涉及-Spring-Security-的注意事项" class="headerlink" title="Spring Boot 2.7.4 升级到 3.x 涉及 Spring Security 的注意事项"></a>Spring Boot 2.7.4 升级到 3.x 涉及 Spring Security 的注意事项</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于公司现在其他团队都升了springboot3.x的版本，导致我们要接入他们的client有点不太兼容，为了追上时代的列车，我决定把我们的项目也跟着升级才行。从 Spring Boot 2.7 升级到 3.x 是一个较大的版本跳跃，特别是 Spring Security 部分有一些重大变化。以下是需要注意的主要事项和一些资源：</p><h3 id="主要变化"><a href="#主要变化" class="headerlink" title="主要变化"></a>主要变化</h3><h4 id="1、java-版本要求"><a href="#1、java-版本要求" class="headerlink" title="1、java 版本要求"></a>1、java 版本要求</h4><ul><li>Spring Boot 3.x 需要 Java 17 或更高版本</li></ul><h4 id="2、Jakarta-EE迁移"><a href="#2、Jakarta-EE迁移" class="headerlink" title="2、Jakarta EE迁移"></a>2、Jakarta EE迁移</h4><ul><li>所有 <code>javax.*</code> 包已迁移到 <code>jakarta.*</code></li><li>影响包括 <code>HttpServletRequest</code>, <code>HttpServletResponse</code> 等类的导入</li></ul><h4 id="3、Spring-Security-6-x-变化"><a href="#3、Spring-Security-6-x-变化" class="headerlink" title="3、Spring Security 6.x 变化"></a>3、<strong>Spring Security 6.x 变化</strong></h4><ul><li><code>WebSecurityConfigurerAdapter</code> 已完全移除，必须使用基于组件的配置</li><li>默认的 CSRF 保护行为有所变化</li><li>默认的 CSRF 保护行为有所变化（显示配置）</li><li>一些过时的方法和类被移除</li></ul><h4 id="4、依赖变化"><a href="#4、依赖变化" class="headerlink" title="4、依赖变化"></a>4、依赖变化</h4><ul><li>检查所有与安全相关的依赖是否兼容 Spring Boot 3.x</li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="旧配置：-基于-WebSecurityConfigurerAdapter"><a href="#旧配置：-基于-WebSecurityConfigurerAdapter" class="headerlink" title="旧配置：(基于 WebSecurityConfigurerAdapter)"></a>旧配置：(基于 WebSecurityConfigurerAdapter)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http<br>            .authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/public/**&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>            .and()<br>            .formLogin();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="新写法：（Springboot3-x）"><a href="#新写法：（Springboot3-x）" class="headerlink" title="新写法：（Springboot3.x）"></a>新写法：（Springboot3.x）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http<br>            .authorizeHttpRequests(auth -&gt; auth<br>                .requestMatchers(<span class="hljs-string">&quot;/public/**&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>            )<br>            .formLogin(form -&gt; form<br>                .loginPage(<span class="hljs-string">&quot;/login&quot;</span>)<br>                .permitAll()<br>            );<br>        <span class="hljs-keyword">return</span> http.build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看着是不是很简单？3是用bean去直接注入，然后换了一些api的写法。但是如果项目用到了OAuth2.0的话呢，就要做多一些事情了</p><h4 id="旧配置：OAuth2-0-配置"><a href="#旧配置：OAuth2-0-配置" class="headerlink" title="旧配置：OAuth2.0 配置"></a>旧配置：OAuth2.0 配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURIS&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String issuerUris;<br><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; issuersList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(WebSecurity web)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        issuersList = Arrays.asList(issuerUris.split(<span class="hljs-string">&quot;,&quot;</span>));<br>        <span class="hljs-built_in">super</span>.init(web);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">JwtIssuerAuthenticationManagerResolver</span> <span class="hljs-variable">authenticationManagerResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtIssuerAuthenticationManagerResolver</span>(issuersList);<br>        http<br>                .authorizeRequests()<br>                .antMatchers( <span class="hljs-string">&quot;/test&quot;</span>,<span class="hljs-string">&quot;/documents&quot;</span>).permitAll()<br>                .antMatchers(<span class="hljs-string">&quot;/swagger-ui/**&quot;</span>, <span class="hljs-string">&quot;/swagger-resources/**&quot;</span>, <span class="hljs-string">&quot;/webjars/**&quot;</span>, <span class="hljs-string">&quot;/v3/**&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                .oauth2ResourceServer(oauth2 -&gt; oauth2.authenticationManagerResolver(authenticationManagerResolver));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(WebSecurity web)</span> &#123;<br>        web.ignoring().antMatchers(<span class="hljs-string">&quot;/actuator/**&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="新配置：OAuth2-0配置"><a href="#新配置：OAuth2-0配置" class="headerlink" title="新配置：OAuth2.0配置"></a>新配置：OAuth2.0配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver;<br><span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-meta">@EnableMethodSecurity(prePostEnabled = true)</span> <span class="hljs-comment">// 替代 @EnableGlobalMethodSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURIS&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String issuerUris;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        List&lt;String&gt; issuersList = Arrays.asList(issuerUris.split(<span class="hljs-string">&quot;,&quot;</span>));<br>        <span class="hljs-type">JwtIssuerAuthenticationManagerResolver</span> <span class="hljs-variable">authenticationManagerResolver</span> <span class="hljs-operator">=</span> <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtIssuerAuthenticationManagerResolver</span>(issuersList);<br>        <br>        http<br>            .authorizeHttpRequests(auth -&gt; auth<br>                .requestMatchers(<span class="hljs-string">&quot;/test&quot;</span>, <span class="hljs-string">&quot;/documents&quot;</span>).permitAll()<br>                .requestMatchers(<span class="hljs-string">&quot;/swagger-ui/**&quot;</span>, <span class="hljs-string">&quot;/swagger-resources/**&quot;</span>, <br>                                 <span class="hljs-string">&quot;/webjars/**&quot;</span>, <span class="hljs-string">&quot;/v3/**&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>            )<br>            .oauth2ResourceServer(oauth2 -&gt; oauth2<br>                .authenticationManagerResolver(authenticationManagerResolver)<br>            );<br>        <br>        <span class="hljs-keyword">return</span> http.build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebSecurityCustomizer <span class="hljs-title function_">webSecurityCustomizer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> web -&gt; web.ignoring().requestMatchers(<span class="hljs-string">&quot;/actuator/**&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="变更说明"><a href="#变更说明" class="headerlink" title="变更说明"></a>变更说明</h3><h5 id="1、移除-WebSecurityConfigurerAdapter-继承"><a href="#1、移除-WebSecurityConfigurerAdapter-继承" class="headerlink" title="1、移除**WebSecurityConfigurerAdapter** 继承"></a>1、移除**<code>WebSecurityConfigurerAdapter</code>** 继承</h5><ul><li>Spring Security 6 完全移除了这个类</li><li>改为使用 <code>@Bean</code> 方法配置</li></ul><h4 id="2、注解变化"><a href="#2、注解变化" class="headerlink" title="2、注解变化"></a>2、注解变化</h4><ul><li><code>@EnableGlobalMethodSecurity</code> 改为 <code>@EnableMethodSecurity</code></li></ul><h4 id="3、配置方法变化"><a href="#3、配置方法变化" class="headerlink" title="3、配置方法变化"></a>3、<strong>配置方法变化</strong></h4><ul><li><code>configure(HttpSecurity http)</code> 改为返回 <code>SecurityFilterChain</code> 的 <code>@Bean</code> 方法</li><li><code>configure(WebSecurity web)</code> 改为返回 <code>WebSecurityCustomizer</code> 的 <code>@Bean</code> 方法</li></ul><h4 id="4、API-方法名称变化"><a href="#4、API-方法名称变化" class="headerlink" title="4、API 方法名称变化"></a>4、<strong>API 方法名称变化</strong></h4><ul><li><code>authorizeRequests()</code> → <code>authorizeHttpRequests()</code></li><li><code>antMatchers()</code> → <code>requestMatchers()</code></li><li><code>ignoring().antMatchers()</code> → <code>ignoring().requestMatchers()</code></li></ul><h4 id="5、初始化逻辑变化"><a href="#5、初始化逻辑变化" class="headerlink" title="5、初始化逻辑变化"></a>5、<strong>初始化逻辑变化</strong></h4><ul><li>原来的 <code>init()</code> 方法中的逻辑可以移到 <code>securityFilterChain</code> 方法中</li><li>或者使用 <code>@PostConstruct</code> 初始化字段</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/image-20250606165228894.png" alt="image-20250606165228894"></p>]]></content>
    
    
    <categories>
      
      <category>工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>升级jdk17遇到的坑</title>
    <link href="/2025/06/04/%E5%8D%87%E7%BA%A7jdk17%E8%B8%A9%E5%9D%91/"/>
    <url>/2025/06/04/%E5%8D%87%E7%BA%A7jdk17%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="升级jdk17遇到的坑"><a href="#升级jdk17遇到的坑" class="headerlink" title="升级jdk17遇到的坑"></a>升级jdk17遇到的坑</h1><h2 id="1、证书问题"><a href="#1、证书问题" class="headerlink" title="1、证书问题"></a>1、证书问题</h2><p>公司的base image是有证书版本的，没证书版本的，一开始没引用正确导致改了好多配置，忽略证书、替换证书无用功等等</p><h2 id="2、jdk17可能会遇到反射等问题，要在pom里面加入配置"><a href="#2、jdk17可能会遇到反射等问题，要在pom里面加入配置" class="headerlink" title="2、jdk17可能会遇到反射等问题，要在pom里面加入配置"></a>2、jdk17可能会遇到反射等问题，要在pom里面加入配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jvmArguments</span>&gt;</span><br>                    --add-opens=java.base/java.util=ALL-UNNAMED<br>                    --add-opens=java.base/java.lang=ALL-UNNAMED<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">jvmArguments</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">argLine</span>&gt;</span><br>                    --add-opens=java.base/java.lang=ALL-UNNAMED<br>                    --add-opens=java.base/java.util=ALL-UNNAMED<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">argLine</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、k8s配置问题"><a href="#3、k8s配置问题" class="headerlink" title="3、k8s配置问题"></a>3、k8s配置问题</h2><h3 id="声明变量到application"><a href="#声明变量到application" class="headerlink" title="声明变量到application"></a>声明变量到application</h3><p>读取backing service的时候，自定义的名字要替换到application.yml里面，记得在env里面声明。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">env</span>:<br>  SERVER.NAME: <span class="hljs-variable">$&#123;SERVER.NAME&#125;</span><br>  JAVA_OPTS: <span class="hljs-variable">$&#123;JAVA_OPTS&#125;</span><br>  SPRING_PROFILES_ACTIVE: <span class="hljs-variable">$&#123;profile&#125;</span><br></code></pre></td></tr></table></figure><h4 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h4><p>把初始化延迟检查调大点，以防pod反复重启</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">startup-probe</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">initial-check-delay</span><span class="hljs-punctuation">:</span> <span class="hljs-string">120</span><br>    <span class="hljs-attribute">retry-interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10</span><br>    <span class="hljs-attribute">max-check-times</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br></code></pre></td></tr></table></figure><h3 id="4、springcloud-stream-引入rabbitmq"><a href="#4、springcloud-stream-引入rabbitmq" class="headerlink" title="4、springcloud-stream 引入rabbitmq"></a>4、springcloud-stream 引入rabbitmq</h3><p>起初只有solace这个消息队列，时代在发展，微服务准备接入rabbitmq，逐步抛弃solace。当前的阶段是两个同时用，然后就产生了2个binder问题</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cloud:</span><br>  <span class="hljs-attr">stream:</span><br>    <span class="hljs-attr">function:</span><br>      <span class="hljs-attr">definition:</span> <span class="hljs-string">aaa;rabbitaaa</span><br>    <span class="hljs-attr">binders:</span><br>      <span class="hljs-attr">solace:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">solace</span><br>      <span class="hljs-attr">rabbit:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">rabbit</span><br>    <span class="hljs-attr">rabbit:</span><br>      <span class="hljs-attr">default:</span><br>        <span class="hljs-attr">consumer:</span><br>          <span class="hljs-attr">rebalancerCompany:</span> <span class="hljs-string">$&#123;COMPANY&#125;</span><br>    <span class="hljs-attr">solace:</span><br>      <span class="hljs-attr">default:</span><br>        <span class="hljs-attr">consumer:</span><br>          <span class="hljs-attr">autoCreateEndpoints:</span> <span class="hljs-literal">false</span><br>          <span class="hljs-attr">topicPatternCompany:</span> <span class="hljs-string">$&#123;SOLACE_CARRIER&#125;</span><br>          <span class="hljs-attr">topicPatternApp:</span> <span class="hljs-string">ECM</span><br>          <span class="hljs-attr">topicPatternComponent:</span> <span class="hljs-string">xxx_ACL</span><br>          <span class="hljs-attr">autoBindDmq:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">transportWindowSize:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">bindings:</span><br>      <span class="hljs-attr">aaa-in-0:</span><br>        <span class="hljs-attr">binder:</span> <span class="hljs-string">solace</span><br>        <span class="hljs-attr">destination:</span> <span class="hljs-string">$&#123;SOLACE_CARRIER&#125;/xxx/DOCUMENT_DM_RESULT/ACL</span><br>        <span class="hljs-attr">contentType:</span> <span class="hljs-string">application/json</span><br>        <span class="hljs-attr">group:</span> <span class="hljs-string">xxx_acl</span><br>        <span class="hljs-attr">consumer:</span><br>          <span class="hljs-attr">concurrency:</span> <span class="hljs-number">4</span><br>          <span class="hljs-attr">partitioned:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">max-attempts:</span> <span class="hljs-number">3</span><br>      <span class="hljs-attr">rabbitaaa-in-0:</span><br>        <span class="hljs-attr">binder:</span> <span class="hljs-string">rabbit</span><br>        <span class="hljs-attr">destination:</span> <span class="hljs-string">$&#123;RABBIT_CARRIER&#125;.xxx.DOCUMENT_DM_RESULT.ACL</span><br>        <span class="hljs-attr">contentType:</span> <span class="hljs-string">application/json</span><br>        <span class="hljs-attr">group:</span> <span class="hljs-string">XXX_ACL</span><br>        <span class="hljs-attr">consumer:</span><br>          <span class="hljs-attr">partitioned:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">max-attempts:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>hexo 本地启动命令是什么： hexo s</p><p>hexo清除缓存： hexo clean</p><p>hexo本地build：hexo g</p><p>hexo 远程推送： hexo d</p>]]></content>
    
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gitlab的SSHKEY过期如何刷新</title>
    <link href="/2025/03/06/Gitlab%E7%9A%84SSHKEY%E8%BF%87%E6%9C%9F%E5%A6%82%E4%BD%95%E5%88%B7%E6%96%B0/"/>
    <url>/2025/03/06/Gitlab%E7%9A%84SSHKEY%E8%BF%87%E6%9C%9F%E5%A6%82%E4%BD%95%E5%88%B7%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于公司的策略是设置了GitLab的sshKey的有效期是一年，今天刚好过期了，所以要生成新的sshKey对，并将新的公钥添加到GitLab账户中。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>打开终端（Linux&#x2F;macOS）或 Git Bash（Windows），输入以下命令生成新的 SSH Key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><ul><li><strong>说明</strong>：<ul><li><code>ed25519</code> 是更安全且推荐的新算法，如果系统不支持，可以用 <code>-t rsa -b 4096</code> 替代。</li><li><code>-C</code> 后的内容可以是你的邮箱或任意标识符，仅用于标记。</li></ul></li><li>按提示选择保存路径（默认按回车即可）和设置密码（可选）。</li></ul><h3 id="2-查看并复制公钥"><a href="#2-查看并复制公钥" class="headerlink" title="2. 查看并复制公钥"></a><strong>2. 查看并复制公钥</strong></h3><p>生成后，查看并复制公钥内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_ed25519.pub<br></code></pre></td></tr></table></figure><p>或手动用文本编辑器打开 <code>id_ed25519.pub</code> 文件，复制全部内容（以 <code>ssh-ed25519</code> 开头）。</p><h3 id="3-将新公钥添加到-GitLab"><a href="#3-将新公钥添加到-GitLab" class="headerlink" title="3. 将新公钥添加到 GitLab"></a><strong>3. 将新公钥添加到 GitLab</strong></h3><ol><li>登录 GitLab，点击右上角头像 → <strong>Preferences</strong> → <strong>SSH Keys</strong>。</li><li>在 <strong>Key</strong> 文本框中粘贴复制的公钥内容。</li><li>填写标题（如 <code>New Key 2025</code>），点击 <strong>Add key</strong>。</li></ol><h3 id="4-删除旧的-SSH-Key（可选）"><a href="#4-删除旧的-SSH-Key（可选）" class="headerlink" title="4. 删除旧的 SSH Key（可选）"></a><strong>4. 删除旧的 SSH Key（可选）</strong></h3><p>如果旧 Key 已不再使用，可以在同一页面找到旧 Key，点击 <strong>Revoke</strong> 移除。</p><h3 id="5-测试-SSH-连接"><a href="#5-测试-SSH-连接" class="headerlink" title="5. 测试 SSH 连接"></a><strong>5. 测试 SSH 连接</strong></h3><p>在终端运行以下命令测试连接：</p><p>bash</p><p>复制</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@gitlab</span>.com<br></code></pre></td></tr></table></figure><ul><li>如果看到 <code>Welcome to GitLab, @username!</code> 表示成功。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/image-20250306110026014.png" alt="image-20250306110026014"></p><p>完成后，你的 GitLab SSH 连接将使用新的 Key。试了下拉代码。没问题！</p>]]></content>
    
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春社</title>
    <link href="/2025/02/06/%E6%98%A5%E7%A4%BE/"/>
    <url>/2025/02/06/%E6%98%A5%E7%A4%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="春社"><a href="#春社" class="headerlink" title="春社"></a>春社</h2><p>2025年的春社日是阳历3月20日春社是中国传统的民俗节日，通常在立春后的第五个戊日举行。这个节日主要是为了祭祀土地神，祈求丰收。</p><p>在我们家运用春社，就是为了祭拜先人，即选择在3月20日前，扫爷爷墓的。</p><p>春社的计算，我也是刚学会，用的deepseek去学的</p><p>立春后的第五个戊日的计算方法如下：</p><ol><li><strong>确定立春的日期</strong>：首先要知道立春是哪一天。比如，2025年的立春是2月3日。</li><li><strong>按照干支纪日的顺序计算戊日</strong>：从立春当天开始，按照干支纪日的顺序计算戊日。干支纪日中，天干和地支各有十个，按照一定的顺序循环排列，形成六十个不同的组合，称为六十甲子。每个甲子代表一天，每过六天，天干和地支的组合会重复一次，即又是同一个甲子日。</li><li>找到第五个戊日：戊日是按照天干的第五个字母“戊”来确定的，每过五天，天干中的“戊”字会再次出现，形成一个新的戊日。因此，立春后的第五个戊日就是春社日</li></ol><p>简洁点就是：</p><p>计算的规则是，立春后的第五个戊日<br>戊日如何计算？ 立春后第五天是第一个戊日，之后每隔十天就是一个戊日</p><p>2025年的2月3号是立春<br>那么第一个戊日就是2月8号<br>第二个戊日就是2月18号<br>第三个戊日就是2月28号<br>第四个戊日就是3月10号<br>第五个戊日就是3月20号</p>]]></content>
    
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>window贴图工具</title>
    <link href="/2025/01/16/window%E8%B4%B4%E5%9B%BE%E5%B7%A5%E5%85%B7/"/>
    <url>/2025/01/16/window%E8%B4%B4%E5%9B%BE%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="window贴图工具"><a href="#window贴图工具" class="headerlink" title="window贴图工具"></a>window贴图工具</h2><p>最近发现了一个好用的工具，snipaste，官网：<a href="https://www.snipaste.com/download.html">https://www.snipaste.com/download.html</a></p><p>我们可以通过两种方式激 活截图工具，分别是：默认快捷键 F1 或单击托盘图标。</p><p>比如我们是一个屏幕，或者屏幕太小了，我觉得挺实用的一个工具，截图的图片会呈现在屏幕最上层固定，对于我们采集数据，或者对比数据比较方便</p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/image-20250116142910526.png" alt="image-20250116142910526"></p>]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024年终总结</title>
    <link href="/2024/12/20/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2024/12/20/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="2024年度总结"><a href="#2024年度总结" class="headerlink" title="2024年度总结"></a>2024年度总结</h1><p>嘿，又到了12月，是有点快，如何形容快？因为看着钱包的数字依旧没有变动多少。原因是今年的开销多了很多，也办成了很多事。</p><h2 id="入职"><a href="#入职" class="headerlink" title="入职"></a>入职</h2><p>自从入职到oocl后，感觉日渐稳定，工作强度也不算大，开发任务不算大，更多是重在维护、解决support case，感觉可以在oocl退休。回想起找工作的心酸经历，用在黑暗里摸鱼也不为过，最终算是松了口气，现在也入职了一年多了，也熟悉了common assets的项目，目前负责的项目的case也能轻松地进行support并解决。</p><h2 id="工作内容"><a href="#工作内容" class="headerlink" title="工作内容"></a>工作内容</h2><h3 id="UPF"><a href="#UPF" class="headerlink" title="UPF"></a>UPF</h3><ul><li><p>今年完成了upf的改造，进行删除老数据，优化拉取数据（path改成代码过滤）、auth地址统一的方式，也顺利了解了Ldap的一些结构以及拉取LDAP的数据去进去合并</p></li><li><p>提供工具给BA，自行查询状态（执行bat文件，bat的写法</p></li></ul><h3 id="ECM"><a href="#ECM" class="headerlink" title="ECM"></a>ECM</h3><p>M1 ECM改造一份十年前的代码，webservice的方式，去分批上云（定时任务拿数据给静态map，请求的时候动态get是走cloud还是走地下示例）</p><p>oracle的建表 要分配权限给账号；修改wcc的数据的sql脚本</p><p>PCRS的申请细节，标题以目标为导向，是否需要回滚，预期是什么</p><p>M2 ECM的添加权限和bucket，改造path路径文件夹分类，dm进行重试改造，修改版本漏洞，</p><h3 id="FODE"><a href="#FODE" class="headerlink" title="FODE"></a>FODE</h3><p>增加消费者、调整JVM参数</p><p>有一个项目类似开源项目，修改要走request push，熟悉修改流程并正确上线</p><h2 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h2><p>工作其实还有很多，杂事也很多。哈哈其实还有一个奇怪的现象就是今年，好像大家都没有在讨论跳槽、离职了。反而是默认的正常发工资就好，身边的也是没有离职，都是只有新招的应届毕业生，社招没有一个。反而是以前，大家都在讨论说工资太低了，过完年我就跳槽，换家公司。毕业几年，人来人往，送走了很多人，我也被人送走，也经历了很多事。经济下行的时候，更多的是没活干，人太多，内卷严重，更多的是学历贬值，收银员都要本科学历。社会现象没办法改变，只能说省点花，因为赚钱真的很难。</p><p>嗯，今年买了一辆小轿车，两年免息，马路三大妈之一。今年也收获了新身份，顺利结婚了，感谢所有人的支持，双方父母各位朋友的撑场，顺利完婚。大家驱车几百公里，很给面子，期待下一个结婚咯，我也想吃席了。以后的日子就是要攒奶粉钱了，还有买房的事情，哈哈珠海房子好贵。</p><p>大哥新买的房子也进宅了，顺顺利利。</p><p>时常回想起，小时候的过往，小时候一起长大的朋友，一起长大的家里人亲戚，一起生活的日子。岁月不饶人，有人离我们而去，姐姐的孩子们一个个出生长大上幼儿园，事情就是这样一件件发生，长大后的兄弟姐妹也是只有过年过节聚聚，好想回到以前一起走路上学的日子。</p><h2 id="show"><a href="#show" class="headerlink" title="show"></a>show</h2><p>今年怕了珠海凤凰山、南屏马鞍山，爬山数量少了很多</p><p>今年在珠海骑单车有点疯狂，有好几次从唐家骑海边一直到梅华，再到南屏，绕很大一圈。也有从南屏到海边 人民医院再原路返回，有时候骑车也很解压的。</p><p>徒步也走了很多，香山湖公园、大镜山水库、中大五院、海天公园一条龙。</p><p>本来报名了马拉松欢乐跑的，由于体育中心事件，就申请退款了。</p><p>未来还有很多很多事，想起来再加进来了待记录…</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结六点……</p><p>2024的照片有点多，随便找点有意义的记录下</p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/007027beaed4fea003f0d930d770474.jpg" alt="007027beaed4fea003f0d930d770474"></p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/3e9e490c03505dbfe4b1dc8ba93ac36.jpg" alt="3e9e490c03505dbfe4b1dc8ba93ac36"></p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/29902e74ddb43bd101ef0e3aba7777f.jpg" alt="29902e74ddb43bd101ef0e3aba7777f"></p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/f2b1865031ce2fc5af6d7851eed3b07.jpg" alt="f2b1865031ce2fc5af6d7851eed3b07"></p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/cb00c0487957b10fe608ea78a65c1c8.jpg" alt="cb00c0487957b10fe608ea78a65c1c8"></p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/85d522f1bafe715be54fa22e24ad0ef.jpg" alt="85d522f1bafe715be54fa22e24ad0ef"></p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/ab6d1afc26a5eeefaa6064fc49a0676.jpg" alt="ab6d1afc26a5eeefaa6064fc49a0676"></p><p>哈哈最后贴点结婚的照片</p><p><video src="https://photovideo.photo.qq.com/1075_0b53tohsyraapyak4jjpeftthgyefqwqba2a.f0.mp4?dis_k=bc7259c0894d9cfbb34104c16dd3400e&dis_t=1734936212&vuin=1150267318&owner=MA==.MP4">您的浏览器不支持播放该视频！</video></p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/A7M07660.jpg" alt="A7M07660"></p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/image-20241223142638910.png" alt="image-20241223142638910"></p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/image-20241223142828737.png" alt="image-20241223142828737"></p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/image-20241223142733348.png" alt="image-20241223142733348"></p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/A7M08636.jpg" alt="A7M08636"></p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/A7M08601-%E5%B7%B2%E5%A2%9E%E5%BC%BA-NR.jpg" alt="A7M08601-已增强-NR"></p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/A7M08914-%E5%B7%B2%E5%A2%9E%E5%BC%BA-NR.jpg" alt="A7M08914-已增强-NR"></p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/A7M08936(1).jpg" alt="A7M08936(1)"></p>]]></content>
    
    
    <categories>
      
      <category>闲聊</category>
      
    </categories>
    
    
    <tags>
      
      <tag>年度总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何白嫖一个图床放图片</title>
    <link href="/2024/12/19/%E5%A6%82%E4%BD%95%E7%99%BD%E5%AB%96%E4%B8%80%E4%B8%AA%E5%9B%BE%E5%BA%8A%E6%94%BE%E5%9B%BE%E7%89%87/"/>
    <url>/2024/12/19/%E5%A6%82%E4%BD%95%E7%99%BD%E5%AB%96%E4%B8%80%E4%B8%AA%E5%9B%BE%E5%BA%8A%E6%94%BE%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h1 id="用github搭建图床"><a href="#用github搭建图床" class="headerlink" title="用github搭建图床"></a>用github搭建图床</h1><p>一开始的博客是不支持图片的，后来觉得有些记录是要用图片去记录，所以我们今天搞一个github图床，直接白嫖。</p><h2 id="1、新建仓库"><a href="#1、新建仓库" class="headerlink" title="1、新建仓库"></a>1、新建仓库</h2><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/image-20241219165442808.png" alt="image-20241219165442808"></p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/image-20241219165530827.png" alt="image-20241219165530827"></p><h2 id="2、生成token令牌"><a href="#2、生成token令牌" class="headerlink" title="2、生成token令牌"></a>2、生成token令牌</h2><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/2609461-20240425155131903-1370211995.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/2609461-20240425155142441-1964343452.png" alt="image"></p><p>然后选择经典的Tokens就可以<img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/image-20241219165703915.png" alt="image-20241219165703915"></p><p>然后创建Tokens</p><p>接下来它可能跳转到登录界面让你输入密码，该怎么输入就输入即可。就是你此github用户的登录密码。</p><p>然后可以给令牌(token)做个Note(标记)，然后选择令牌(token)截止时间。我选了永久</p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/image-20241219165736213.png" alt="image-20241219165736213"></p><p>紧接着把这个repo全部选上：<img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/image-20241219165748188.png" alt="image-20241219165748188"></p><p>这个Token是你的服务器（即你的账户下的github服务器）的令牌，暂时和你的仓库还没有什么关系。</p><p>然后创建完以后，就会出现一串Token字符串，你把这个Token数字复制、保存下来(可以新创一个txt文件，保存到里面)。因为你可能一会儿就见不到了。</p><h2 id="3-使用PicGo来实现图片上传"><a href="#3-使用PicGo来实现图片上传" class="headerlink" title="3 使用PicGo来实现图片上传"></a>3 使用PicGo来实现图片上传</h2><h3 id="下载picGo"><a href="#下载picGo" class="headerlink" title="下载picGo"></a>下载picGo</h3><p>首先要说一下，PicGo是一款软件。我们就是用它来实现图片上传的。所以说，它是核心软件。</p><p>下载方法也比较简单。这里推荐山东大学的镜像网站：</p><p><a href="https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo/v2.3.1/">https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo/v2.3.1/</a></p><p>根据自己的电脑来选，window的选exe，mac的选dmg</p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/image-20241219165924332.png" alt="image-20241219165924332"></p><h3 id="picGo配置"><a href="#picGo配置" class="headerlink" title="picGo配置"></a>picGo配置</h3><p>1、选择【图床设置】-&gt;【Github】</p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/2609461-20240425155430934-535758820.png" alt="image"></p><p>2、然后进行配置：</p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/image-20241219170015197.png" alt="image-20241219170015197"></p><p>解释下：</p><ul><li><p>仓库名就是： 你github的用户名+仓库名： 例如我的就是liu-cj25&#x2F;lcjImg</p></li><li><p>分支名注意是main 还是master</p></li><li><p>token就是上一步在github生成的token</p></li><li><p>存储路径就是该新仓库的文件夹（自己看着来）</p></li><li><p>自定义域名：</p></li><li><p>这个是比较关键的。我们可以用一个免费的加速域名作为我们自定义域名。</p><p>那么你所设置的就应当为<a href="https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/</a> +你的账户名+你的仓库名@你的分支名。比如，我上面的就是<a href="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master%E6%8C%89%E7%85%A7%E9%9C%80%E8%A6%81%E6%94%B9%E6%88%90%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E3%80%82">https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master按照需要改成你自己的。</a></p><p>需要注意的是，这里一定要设置成@，而不要设置成 &#x2F; 我也是花了很长很长时间才搞明白。。。设置成 &#x2F; 以后，你会惊奇地发现，它在你的typora里面显示不了。。。</p><p>配置完以后，就可以点击确定，然后也可以将其设置为默认图床。</p></li></ul><p>3、用picGo实现上传</p><p>上传的方式很简单，直接拖拽或者选择图片进行上传就ok了，然后我们去看github的img文件夹下有没有新upload的文件</p><h2 id="4、设置Typora实现自动上传"><a href="#4、设置Typora实现自动上传" class="headerlink" title="4、设置Typora实现自动上传"></a>4、设置Typora实现自动上传</h2><p>1、首先，点击【文件】-&gt;【偏好设置】</p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/2609461-20240425155731987-116968716.png" alt="image"></p><p>2、再次，选择【图像】。</p><p>然后按照下图所示，插入图片时选择上传图片。然后在上传服务内选择PicGo，并选择PicGo.exe的路径。</p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/2609461-20240425155740340-740255370.png" alt="image"></p><p>这里的可以这样来去配置：</p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/2609461-20240425155749044-922027867.png" alt="image"></p><p>然后这样的话，你将你的截图直接粘贴到Typora里面，你的Typora会将链接直接通过PicGo上传到你Github服务器的仓库中。然后别人和你就都可以通过访问这个链接来实现图片共享啦。这样，你在发送你的文件的时候，图片就不会丢失了。</p><h2 id="5、温馨提示"><a href="#5、温馨提示" class="headerlink" title="5、温馨提示"></a>5、温馨提示</h2><p>1、注意你的Typora的语言，如果是英文版本的话，设置picGo的时候是不会显示exe的（亲测）</p><p>2、token一定要记下来，因为你关了这个页面 就不会显示了，要重新生成</p>]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>excel批量生成sql</title>
    <link href="/2024/12/18/excel%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90sql/"/>
    <url>/2024/12/18/excel%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90sql/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>有一个team想修改一个表中的一个字段，大约有几十条数据，我要准备好脚本给DBA去修改，手动补有点慢，我们用excel来帮我们生成对应的sql以及填充好参数。</p><h1 id="开干"><a href="#开干" class="headerlink" title="开干"></a>开干</h1><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">=<span class="hljs-string">&quot;UPDATE REVISIONS SET DDOCTITLE = &#x27;&quot;</span>&amp;<span class="hljs-symbol">B1</span>&amp;<span class="hljs-string">&quot;&#x27; WHERE DDOCNAME=&#x27;&quot;</span>&amp;<span class="hljs-symbol">A1</span>&amp;<span class="hljs-string">&quot;&#x27;;&quot;</span><br></code></pre></td></tr></table></figure><p>然后往下拉就可以拉出对应的sql了</p><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/image-20241220083827676.png" alt="image-20241220083827676"></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>postman循环调用一个接口，传不同参数</title>
    <link href="/2024/12/17/postman%E5%BE%AA%E7%8E%AF%E8%B0%83%E7%94%A8%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3/"/>
    <url>/2024/12/17/postman%E5%BE%AA%E7%8E%AF%E8%B0%83%E7%94%A8%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近遇到一个邮件要重发的问题，但是这个接口是接收一个id的参数，需要帮忙重发，一个个去点好像有点不太好，于是想通过postman去循环调用</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>了解postman支持这个后，官网地址：<a href="https://www.postman.com/postman/postman-answers/collection/uu8mp6u/loop-request-with-different-data">Loop request with different data | Get Started | Postman API Network</a></p><p>提供了这个细节，然后我想通过用这个来尝试一下</p><p>首先大致流程是：</p><p>1、在postman 添加一个request，接收的参数用<code>&#123;&#123;&#125;&#125;</code>来替换，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://localhost:8900/test/test/&#123;&#123;<span class="hljs-built_in">id</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>2、然后准备一个json文件，内容为一堆键值对，例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>3、准备好之后找到右下角的runner，把要请求的接口拖进来，选择刚才创建的 <code>json</code> 文件，Persist</p><p> response后，start run就可以看到我们在反复调用这个接口了，执行的接口为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8900</span><span class="hljs-regexp">/test/</span>test/<span class="hljs-number">1</span><br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8900</span><span class="hljs-regexp">/test/</span>test/<span class="hljs-number">2</span><br>....<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8900</span><span class="hljs-regexp">/test/</span>test/<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora2024最新版破解方法</title>
    <link href="/2024/12/16/Typora2024%E6%9C%80%E6%96%B0%E7%89%88%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/"/>
    <url>/2024/12/16/Typora2024%E6%9C%80%E6%96%B0%E7%89%88%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="一、下载并安装Typora"><a href="#一、下载并安装Typora" class="headerlink" title="一、下载并安装Typora"></a>一、下载并安装Typora</h2><p>安装Typora 打开官网 下载并安装最新版即可<br>点击访问Typora <a href="https://typoraio.cn/">https://typoraio.cn/</a><br>点击立即下载</p><h2 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h2><p>1、打开你的Typora的安装路径<br>打开安装路径下这个文件夹</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">typora\resources\page-dist\static\js<br></code></pre></td></tr></table></figure><p>在这个文件夹中找到这个文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">LicenseIndex</span>.<span class="hljs-number">180</span>dd4c7.<span class="hljs-number">4</span>da8909c.chunk.js<br></code></pre></td></tr></table></figure><p>右键用记事本打开<br>将文件中的</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">e.hasActivated<span class="hljs-operator">=</span><span class="hljs-string">&quot;true&quot;</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>e.hasActivated<br></code></pre></td></tr></table></figure><p>替换成：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">e.hasActivated<span class="hljs-operator">=</span><span class="hljs-string">&quot;true&quot;</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><p>2、继续找到</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">Typora\resources\page-dist\license.html<br></code></pre></td></tr></table></figure><p>用记事本并查找到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;/body&gt;</span><span class="hljs-section">&lt;/html&gt;</span><br></code></pre></td></tr></table></figure><p>替换为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">close</span>();&#125;,<span class="hljs-number">5</span>);&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="去除软件左下角未激活提示"><a href="#去除软件左下角未激活提示" class="headerlink" title="去除软件左下角未激活提示"></a>去除软件左下角未激活提示</h2><p>以下路径</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">Typora\resources\locales\zh-Hans.lproj\Panel.json <br></code></pre></td></tr></table></figure><p>查找到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;UNREGISTERED&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;未激活&quot;</span><br></code></pre></td></tr></table></figure><p>替换成</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;UNREGISTERED&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot; &quot;</span><br></code></pre></td></tr></table></figure><h3 id="激活完成"><a href="#激活完成" class="headerlink" title="激活完成"></a>激活完成</h3><p>直接打开该软件，即可完美跳过提示。</p>]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初始化的博客</title>
    <link href="/2024/12/13/%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/12/13/%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="hello"><a href="#hello" class="headerlink" title="hello"></a>hello</h3><p>你好哦</p><h2 id="我尝试加入了一个图片"><a href="#我尝试加入了一个图片" class="headerlink" title="我尝试加入了一个图片"></a>我尝试加入了一个图片</h2><p><img src="https://cdn.jsdelivr.net/gh/liu-cj25/lcjImg@master/img/ab415120de8815da31fb5c8c96ed4d7.png" alt="ab415120de8815da31fb5c8c96ed4d7"></p>]]></content>
    
    
    <categories>
      
      <category>init</category>
      
    </categories>
    
    
    <tags>
      
      <tag>init</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/13/hello-world/"/>
    <url>/2024/12/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
